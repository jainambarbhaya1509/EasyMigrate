const xlsx = require("xlsx");
const { Pool } = require("pg");
const fs = require("fs");
const prompt = require('prompt-sync')();

/* This code block is defining the PostgreSQL server information required to connect to a PostgreSQL
database. It is creating a new `Pool` object with the `user`, `host`, `database`, `password`, and
`port` properties set to the appropriate values for the PostgreSQL server. This object is then used
to connect to the PostgreSQL database in the `connectToPostgreSQL()` function. */
// PostgreSQL Server Information
const pool = new Pool({
  user: "postgres",
  host: "localhost",
  database: "test",
  password: "admin",
  port: 5432,
});

/*
This function connects to a PostgreSQL database and logs a message if successful or an error if unsuccessful.
*/
async function connectToPostgreSQL() {
  try {
    await pool.connect();
    console.log('Connected to PostgreSQL');
  } catch (error) {
    console.error('Error connecting to PostgreSQL:', error);
    throw error;
  }
}

/*
This function disconnects from a PostgreSQL database and logs a message indicating success or
failure.
*/
async function disconnectFromPostgreSQL() {
  try {
    pool.end();
    console.log('Disconnected from PostgreSQL');
  } catch (error) {
    console.error('Error disconnecting from PostgreSQL:', error);
    throw error;
  }
}

/* 
This code block is reading an Excel file using the `xlsx` library and retrieving the names of all
the sheets in the file. It is then looping through each sheet and retrieving the column names for
that sheet. It is using the `decode_range` function to get the range of cells in the sheet, and
then looping through each column in that range to get the value of the cell and convert it to a
column name. The column names are converted to lowercase and any spaces are replaced with
underscores. The column names for each sheet are stored in an array `row`, and the array for each
sheet is stored in another array `rows`. The `console.log` statements are used to display the table
name and column names for each sheet, and the final `console.log` statement displays the `rows`
array, which contains the column names for all the sheets in the Excel file.
*/
async function readExcel(filePath) {
  const workbook = xlsx.readFile(filePath);
  const tableNames = workbook.SheetNames;
  console.log("Table Names: ", tableNames)

  let rows = [];

  // Retrieving column names form 
  for (const tableName of tableNames) {
    const worksheet = workbook.Sheets[tableName];
    const range = xlsx.utils.decode_range(worksheet['!ref']);

    let row = []; //Emptying list for new sheet

    for (let c = range.s.c; c <= range.e.c; c++) {
      const cellAddress = xlsx.utils.encode_cell({ r: range.s.r, c });
      const cellValue = worksheet[cellAddress] ? worksheet[cellAddress].v : '';
      const column = cellValue.toLowerCase().replace(/\s/g, "_");
      row.push(column);
    }

    // Adding columns name of each sheet into rows list for mapping
    rows.push(row);

    console.log(`Table: ${tableName}`);
    console.log(row);
  }
  console.log(rows);

  /* 
  This code block is asking the user to input the data type and constraints for each column in each
  table in the Excel file. It is creating an empty array `dts` to store the data types and
  constraints for each column in each table. It is then looping through each table in the Excel file
  and asking the user to input the data type and constraints for each column in that table. It is
  using the `prompt` function to display a prompt to the user for each column, and the user can input
  the data type and constraints for that column. The input is stored in an array `dt` and then pushed
  into the `dts` array. Finally, the `dt` array is logged to the console to show the data types and
  constraints for each column in the table. 
  */
  let dts = [];
  for (let i = 0; i < tableNames.length; i++) {
    let dt = []
    const tableName = tableNames[i];
    const tableCols = rows[i].map((columnName) => `${columnName}`);
    console.log("Enter Datatype & Constraints of: ", tableName)
    for (let col of tableCols) {
      col = prompt(`${col} (default 'text'): `)
      dt.push(col || 'text');
    }
    dts.push(dt)
    console.log(dt)
  }

  /* 
  This code block is looping through each table in the Excel file and creating a table in the
  PostgreSQL database with the same name and columns as the Excel table. It is using the `createTable`
  function to execute a SQL query to create the table with the specified columns and data types. The
  `tableCols` variable is a string that contains the column names and data types for the table, which
  is generated by mapping the column names from the Excel file to their corresponding data types from
  the `dts` array. 
  */
  for (let i = 0; i < tableNames.length; i++) {
    const tableName = tableNames[i];
    const tableCols = rows[i].map((columnName, index) => `${columnName} ${dts[i][index]}`).join(", ");
    await createTable(tableName, tableCols);
  }

  /* 
  This code block is looping through each table in the Excel file and inserting the data from that
  table into the corresponding table in the PostgreSQL database. It is using the `tableName`
  variable to get the name of the table, the `tableCols` variable to get the column names for the
  table, and the `worksheet` variable to get the data from the Excel file. It is then using the
  `sheet_to_json` function from the `xlsx` library to convert the data from the worksheet into an
  array of objects, where each object represents a row in the table. The `shift` function is used to
  remove the first element of the array, which contains the column names. Finally, the `insertData`
  function is called to insert the data into the PostgreSQL database, and the number of records
  inserted is logged to the console. 
  */
  for (let i = 0; i < tableNames.length; i++) {
    const tableName = tableNames[i];
    const tableCols = rows[i].map((columnName) => `${columnName}`).join(", ");
    const worksheet = workbook.Sheets[tableName];
    const tableData = xlsx.utils.sheet_to_json(worksheet, { header: 1, raw: false, dateNF: 'yyyy-mm-dd' });
    tableData.shift();
    await insertData(tableName, tableCols, tableData);
    console.log(tableData.length, " Records Inserted in ", tableName);
  }
}

/**
This function creates a table in a PostgreSQL database if it does not already exist.
@param tableName - A string representing the name of the table to be created in the database.
@param tableCols - a string containing the columns and their data types for the table being created.
For example: "id SERIAL PRIMARY KEY, name VARCHAR(50), age INT".
*/
async function createTable(tableName, tableCols) {
  try {
    const client = await pool.connect();
    const query = `CREATE TABLE IF NOT EXISTS public.${tableName} ( ${tableCols} );`;
    await client.query(query);
    console.log(`Table ${tableName} created in the database`);
    client.release();
  } catch (error) {
    console.error('Error creating table:', error);
    throw error;
  }
}

/**
This function inserts data into a specified table in a PostgreSQL database.
@param tableName - The name of the table where the data will be inserted.
@param tableCols - The columns of the table where the data will be inserted.
@param records - The records parameter is an array of arrays, where each inner array represents a
row of data to be inserted into the specified table. Each inner array contains values for each
column in the table, in the order specified by the tableCols parameter.
 */
async function insertData(tableName, tableCols, records) {
  try {
    const client = await pool.connect();
    const values = records.map((record) => {
      const sanitizedRecord = record.map((row) => {
        // Check if cell value is empty and assign a default value
        if (row === "") {
          return "null";
        } else {
          return `'${row}'`;
        }
      });
      return `(${sanitizedRecord.join(", ")})`;
    }).join(", ");
    const query = `INSERT INTO ${tableName} (${tableCols}) VALUES ${values};`;
    await client.query(query);
    client.release();
  } catch (error) {
    console.error("Error inserting data: ", error);
    throw error;
  }
}

/*
The function connects to a PostgreSQL database, reads an Excel file, and then disconnects from the
database.
 */
async function main() {
  try {
    await connectToPostgreSQL();
    await readExcel("C:/Users/Jainam Barbhaya/Desktop/employee.xlsx");
    await disconnectFromPostgreSQL();
  } catch (error) {
    throw error;
  }
}

/* 
`main();` is calling the `main` function, which connects to a PostgreSQL database, reads an Excel
file, and then disconnects from the database. 
*/
main();